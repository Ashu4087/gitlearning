# debugging:

VS Code has built-in debugging support for the Node.js runtime and can debug JavaScript, TypeScript, or any other language that gets transpiled to JavaScript.

If running and debugging is not yet configured (no launch.json has been created), VS Code shows the Run start view.

To bring up the Run view, select the Run icon in the Activity Bar on the side of VS Code

creating a launch configuration file is beneficial because
 it allows you to configure and save debugging setup details. 
 And you can enter command line arguments..
VS Code keeps debugging configuration information in a launch.json file located in a .vscode folder in your workspace (project root folder) or in your user settings or workspace settings.

To create a launch.json file, click the create a launch.json file link in the Run start view.

then in .vscode the launch.json file is created.

# Launch versus attach configurations:
    In VS Code, there are two core debugging modes,
     Launch and Attach, which handle two different workflows and segments of developers. 

     LAUNCH configuration as a recipe for how to START your app in debug mode before VS Code attaches to it,
      while an ATTACH configuration is a recipe for how to CONNECT VS Code's debugger to
      an app or process that's already running.

# VS Code also supports compound launch configurations for starting multiple configurations at the same time;

# Once a debug session starts, the "Debug toolbar" will appear on the top of the editor.

Debug Actions

Continue / Pause F5
Step Over F10
Step Into F11
Step Out Shift+F11
Restart Ctrl+Shift+F5
Stop Shift+F5

# Run mode:
In addition to debugging a program, VS Code supports running the program.


# Breakpoints:
->Breakpoints in the editor margin are normally shown as red filled circles.
-> Disabled breakpoints have a filled gray circle.
-> When a debugging session starts, breakpoints that cannot be registered with the debugger change to a gray hollow circle. 
    The same might happen if the source is edited while a debug session without live-edit support is running.

#Logpoints:
A Logpoint is a variant of a breakpoint that does not "break" into the debugger but instead logs a message to the console.
Logpoints are especially useful for injecting logging while debugging production servers that cannot be paused or stopped.
A Logpoint is represented by a "diamond" shaped icon. Log messages are plain text but can include expressions to be evaluated within curly braces ('{}').


#Conditional breakpoints:

Expression condition: The breakpoint will be hit whenever the expression evaluates to true.
(and first Expression condition is evaluated before evaluating the statement the line.)
Hit count: The 'hit count' controls how many times a breakpoint needs to be hit before it will 'break' execution.
 Whether a 'hit count' is respected and the exact syntax of the expression vary among debugger extensions.