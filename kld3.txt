key learnings day 3 (Version Control System):


# (CVCS) Centralised Version Control System has a Central server which stores the previous version (remote repository "Which is on internt")when 
     we add new feature ..and the current feature us  stored in the current local system(PC)..
...//the problem is when it fails there is no backup
..
# "Git" is DVCS (Distributed Version Control System) : along with the remote repository every System has their own local repository..
so the user can create their own version in their local system and whenever needed(and have Internet) add to remote repository..

U -> Untracked file
A -> Added  // in staging area
M-> Modified file

Q> How can we get remote repository ? (Having the versions of our project on Internet)
--> We can create our own ..by buying/(creating our own pc ) a server and update our version...
OR
--> we can use GitHub / BitBucket / GitLab / Azure / google Cloud etc...

git config --global user.name  --> configure the owner of the project
git config user.name -->to see the owner of the project 
git init -> initialize the .git in the pwd which track the changes of your project.
git clone [url] // download the project in cwd from the url with associated git function(files , commit , branches).
git status // shows the current branch,current modified files ..
git add [file1] [ file2].. // take the snapshot of  given file in stagging area which is ready to commit..
                            which  temporary stores the current snapshot
git add . // add all modified file of current branch..for temporary
git commit // permanentaly stores the stagged/temporary files of current branch
git commit -a // which will automatically notice any modified (but not new) files, add them to the index, and commit, all in one step.
git commit -m "message" // you can also add message to know what changes has been made.
git log // shows the history of the commint along with the owner who made commit.
git log -p // If you also want to see complete diffs at each step
git branch  // shows the current branch on which you are working on
git branch [branch-name] // create a branch with given name.
git checkout [branch-name] // switches to the given branch and modify the file
git merge [branch] // merge the given branch in present working branch
git branch -d [branch-name] //delete the specified branch
git log --follow [file] // list the version history of file with rename
git diff [first-branch]...[second-branch] // show the content difference between the first and second branch


#push
git remote add [nickname to url reference] [url] // to add current local repo to remote repo having given url generally origin is the default nickname
now push the changes using:
git push origin [local branch name]:[rempote branch name]
git push // will not work if the remote branch is not set/linked with local
 git push origin master // to define the default remote branch for the local branch .. so it will ask for username and passed

git push -u remote master ...
git push --set-upstream origin master // Now the remote master branch is set to track the local master branch..
//Now run "git push" the changes made to local master branch is reflected to remote master branch.
git push -u origin master ... //will do the same things remote master -> local master.


git fetch -v  //it will only download the recent changes in the remote branch to the remote bracnh but not to the cwd(on your pc)..
git pull -v  // download the current changes in remote brance to local and at cwd (pc) as well..




